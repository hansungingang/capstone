/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/board/board-show.js":
/*!******************************************!*\
  !*** ./resources/js/board/board-show.js ***!
  \******************************************/
/***/ (() => {

eval("function getComments() {\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: 'get',\n    url: '/comment/' + boardId,\n    success: function success(response) {\n      console.log(response);\n      $('.area-comment').html(commentShow(response));\n    },\n    error: function error(response) {\n      console.log(response);\n    }\n  });\n}\n\nfunction commentShow(comments) {\n  var result = '';\n  $.each(comments.data, function (index, value) {\n    if (value.parent_comment_id == 0) {\n      //댓글이면\n      if (value.subcomments.length > 0) {\n        //대댓글이 있으면\n        result += commentArea(value) + subCommentArea(value.subcomments);\n      } else {\n        result += commentArea(value);\n      }\n    }\n  });\n  return result;\n}\n\nfunction buttonArea(commentId, user_id) {\n  var result = '';\n\n  if (loggedIn) {\n    result += '<button class=\"btn btn-primary text-white\" href=\"#\" id=\"replyButton\">답변</button>';\n\n    if (authId == user_id) {\n      result += '<button class=\"btn btn-primary text-white\" href=\"#\" id=\"changeComment\">수정</button>' + '<form id=\"destroyComment\">' + '<input type=\"hidden\" id=\"commentId\" value=\"' + commentId + '\">' + '<input type=\"submit\" class=\"btn btn-danger\" value=\"삭제\">' + '</form>';\n    }\n  }\n\n  return result;\n}\n\nfunction subCommentButtonArea(commentId, user_id) {\n  var result = '';\n\n  if (loggedIn) {\n    if (authId == user_id) {\n      result += '<button class=\"btn btn-primary text-white\" href=\"#\" id=\"changeComment\">수정</button>' + '<form class=\"form\" id=\"destroyComment\">' + '<input type=\"hidden\" id=\"commentId\" value=\"' + commentId + '\">' + '<input type=\"submit\" class=\"btn btn-danger\" value=\"삭제\">' + '</form>';\n    }\n  }\n\n  return result;\n}\n\nfunction commentArea(value) {\n  return '<div class=\"comments\">' + '<div class=\"comment\">' + '<div class=\"content\">' + '<header class=\"top\">' + '<div class=\"username\">' + value.user.name + '</div>' + '<div class=\"utility\">' + buttonArea(value.id, value.user_id) + '</div>' + '</header>' + '<div class=\"reply-content\"><p>' + value.content + '</p></div>' + '<div class=\"reply-content-update-form\">' + '<form id=\"updateComment\">' + '<input type=\"hidden\" id=\"commentId\" value=\"' + value.id + '\">' + '<input type=\"text\" value=\"' + value.content + '\" id=\"commentContent\">' + '<input type=\"submit\" class=\"btn btn-success\" value=\"수정\">' + '<button type=\"button\" id=\"changeCancel\" class=\"btn btn-danger\">취소</button>' + '</form>' + '</div>' + '<ul class=\"bottom\">' + '<li class=\"menu time\">' + value.created_at + '</li>' + '<li class=\"divider\"></li>' + '<li class=\"menu show-reply\">답변 수 (' + value.subcomments.length + ')</li>' + '</ul>' + '</div>' + '</div>' + '<div class=\"reply-form-place\">' + '<form class=\"form reply-form\" id=\"storeReplyComment\">' + '<input type=\"hidden\" id=\"parent_comment_id\" value=\"' + value.id + '\">' + '<textarea placeholder=\"Reply\" name=\"content\" id=\"comment_content\"></textarea>' + '<button type=\"submit\" class=\"submit\">등록하기</button>' + '</form>' + '</div>' + '</div>';\n}\n\nfunction subCommentArea(subComments) {\n  var result = '';\n\n  if (subComments.length > 0) {\n    $.each(subComments, function (index, value) {\n      result += '<div class=\"replies\">' + '<div class=\"reply\">' + '<div class=\"content\">' + '<header class=\"top\">' + '<div class=\"username\">' + value.user.name + '</div>' + '<div class=\"utility\">' + subCommentButtonArea(value.id, value.user_id) + '</div>' + '</header>' + '<div class=\"reply-content\"><p>' + value.content + '</p></div>' + '<div class=\"reply-content-update-form\">' + '<form id=\"updateComment\">' + '<input type=\"hidden\" id=\"commentId\" value=\"' + value.id + '\">' + '<input type=\"text\" value=\"' + value.content + '\" id=\"commentContent\">' + '<input type=\"submit\" class=\"btn btn-success\" value=\"수정\">' + '<button type=\"button id=\"changeCancel\" class=\"btn btn-danger\">취소</button>' + '</form>' + '</div>' + '<ul class=\"bottom\">' + '<li class=\"menu time\">' + value.created_at + '</li>' + '</ul>' + '</div>' + '</div>' + '</div>';\n    });\n  }\n\n  return result;\n}\n\nfunction storeComment(comment_content, parent_comment_id) {\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: 'POST',\n    url: '/comment/' + boardId,\n    data: {\n      content: comment_content,\n      parent_comment_id: parent_comment_id\n    },\n    success: function success(response) {\n      if (response.status == '200') {\n        getComments();\n        alert(response.message);\n      } else {\n        console.log(response.message);\n      }\n    },\n    error: function error(xhr, ajaxOptions, thrownError) {\n      message = jQuery.parseJSON(xhr.responseText).message;\n      alert('댓글 작성 실패하였습니다. 이유: ' + message);\n\n      if (xhr.status == 401) {\n        window.location.href = '/login';\n      }\n    }\n  });\n  return false;\n}\n\nfunction updateComment(commentId, commentContent) {\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: 'POST',\n    url: '/comment/update/' + commentId,\n    data: {\n      _method: \"PUT\",\n      content: commentContent\n    },\n    success: function success(response) {\n      if (response.status == '200') {\n        getComments();\n      } else {\n        console.log(response.message);\n      }\n    },\n    error: function error(xhr, ajaxOptions, thrownError) {\n      message = jQuery.parseJSON(xhr.responseText).message;\n      alert('댓글 수정 실패하였습니다. 이유: ' + message);\n\n      if (xhr.status == 401) {\n        window.location.href = '/login';\n      }\n    }\n  });\n  return false;\n}\n\nfunction destroyComment(commentId) {\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n  $.ajax({\n    type: 'POST',\n    url: '/comment/destroy/' + commentId,\n    data: {\n      _method: \"DELETE\"\n    },\n    success: function success(response) {\n      if (response.status == '200') {\n        getComments();\n      } else {\n        console.log(response.message);\n      }\n    },\n    error: function error(xhr, ajaxOptions, thrownError) {\n      message = jQuery.parseJSON(xhr.responseText).message;\n      alert('댓글 삭제 실패하였습니다. 이유: ' + message);\n\n      if (xhr.status == 401) {\n        window.location.href = '/login';\n      }\n    }\n  });\n  return false;\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  getComments();\n  $(document).on('click', '#replyButton', function () {\n    var replyForm = $(this).parents('.comment').siblings('.reply-form-place');\n\n    if (replyForm.hasClass('active')) {\n      replyForm.removeClass('active');\n    } else {\n      replyForm.addClass('active');\n    }\n  });\n  $(document).on('submit', '#storeComment', function (event) {\n    event.preventDefault();\n    var parent_comment_id = $(this).children('#parent_comment_id').val();\n    var comment_content = $(this).children('#comment_content');\n    storeComment(comment_content.val(), parent_comment_id);\n    comment_content.val('');\n  });\n  $(document).on('submit', '#storeReplyComment', function (event) {\n    event.preventDefault();\n    var parent_comment_id = $(this).children('#parent_comment_id').val();\n    var comment_content = $(this).children('#comment_content');\n    storeComment(comment_content.val(), parent_comment_id);\n    comment_content.val('');\n  });\n  $(document).on('submit', '#updateComment', function (event) {\n    event.preventDefault();\n    commentId = $(this).children('#commentId').val();\n    commentContent = $(this).children('#commentContent').val();\n    updateComment(commentId, commentContent);\n  });\n  $(document).on('submit', '#destroyComment', function (event) {\n    event.preventDefault();\n    var commentId = $(this).children('#commentId').val();\n    destroyComment(commentId);\n  });\n  $(document).on('click', '#changeComment', function () {\n    reply = $(this).parents('.top');\n    replyForm = reply.siblings('.reply-content-update-form');\n    replyContent = reply.siblings('.reply-content');\n    replyFormActive(replyForm, replyContent);\n  });\n  $(document).on('click', '#changeCancel', function () {\n    replyForm = $(this).parents('.reply-content-update-form');\n    replyContent = replyForm.siblings('.reply-content');\n    replyFormActive(replyForm, replyContent);\n  });\n});\n\nfunction replyFormActive(replyForm, replyContent) {\n  if (replyForm.hasClass('active')) {\n    replyContent.removeClass('hide');\n    replyForm.removeClass('active');\n  } else {\n    replyContent.addClass('hide');\n    replyForm.addClass('active');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/board/board-show.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/board/board-show.js"]();
/******/ 	
/******/ })()
;